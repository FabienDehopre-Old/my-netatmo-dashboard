// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netatmo.Dashboard.Api;

namespace Netatmo.Dashboard.Api.Migrations
{
    [DbContext(typeof(NetatmoDbContext))]
    [Migration("20190316142102_FlattenEntities")]
    partial class FlattenEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.DashboardData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceId");

                    b.Property<DateTime>("TimeUtc");

                    b.Property<string>("type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DashboardData");

                    b.HasDiscriminator<string>("type").HasValue("DashboardData");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.Device", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(17)
                        .IsUnicode(true);

                    b.Property<int>("Firmware");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<int>("StationId");

                    b.Property<string>("module_type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("Devices");

                    b.HasDiscriminator<string>("module_type").HasValue("Device");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Altitude");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(true);

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("StaticMap")
                        .HasMaxLength(1024)
                        .IsUnicode(true);

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ExpiresAt");

                    b.Property<int?>("FeelLike");

                    b.Property<int?>("PressureUnit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<int?>("Unit");

                    b.Property<string>("UpdateJobId")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<int?>("WindUnit");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.IndoorDashboardData", b =>
                {
                    b.HasBaseType("Netatmo.Dashboard.Api.Models.DashboardData");

                    b.Property<int>("CO2");

                    b.Property<int>("Humidity");

                    b.Property<decimal>("Temperature");

                    b.Property<decimal>("TemperatureMax");

                    b.Property<DateTime>("TemperatureMaxTimestamp");

                    b.Property<decimal>("TemperatureMin");

                    b.Property<DateTime>("TemperatureMinTimestamp");

                    b.Property<int>("TemperatureTrend");

                    b.HasDiscriminator().HasValue("NAModule4");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.MainDashboardData", b =>
                {
                    b.HasBaseType("Netatmo.Dashboard.Api.Models.DashboardData");

                    b.Property<decimal>("AbsolutePressure");

                    b.Property<int>("CO2")
                        .HasColumnName("MainDashboardData_CO2");

                    b.Property<int>("Humidity")
                        .HasColumnName("MainDashboardData_Humidity");

                    b.Property<int>("Noise");

                    b.Property<decimal>("Pressure");

                    b.Property<int>("PressureTrend");

                    b.Property<decimal>("Temperature")
                        .HasColumnName("MainDashboardData_Temperature");

                    b.Property<decimal>("TemperatureMax")
                        .HasColumnName("MainDashboardData_TemperatureMax");

                    b.Property<DateTime>("TemperatureMaxTimestamp")
                        .HasColumnName("MainDashboardData_TemperatureMaxTimestamp");

                    b.Property<decimal>("TemperatureMin")
                        .HasColumnName("MainDashboardData_TemperatureMin");

                    b.Property<DateTime>("TemperatureMinTimestamp")
                        .HasColumnName("MainDashboardData_TemperatureMinTimestamp");

                    b.Property<int>("TemperatureTrend")
                        .HasColumnName("MainDashboardData_TemperatureTrend");

                    b.HasDiscriminator().HasValue("NAMain");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.OutdoorDashboardData", b =>
                {
                    b.HasBaseType("Netatmo.Dashboard.Api.Models.DashboardData");

                    b.Property<int>("Humidity")
                        .HasColumnName("OutdoorDashboardData_Humidity");

                    b.Property<decimal>("Temperature")
                        .HasColumnName("OutdoorDashboardData_Temperature");

                    b.Property<decimal>("TemperatureMax")
                        .HasColumnName("OutdoorDashboardData_TemperatureMax");

                    b.Property<DateTime>("TemperatureMaxTimestamp")
                        .HasColumnName("OutdoorDashboardData_TemperatureMaxTimestamp");

                    b.Property<decimal>("TemperatureMin")
                        .HasColumnName("OutdoorDashboardData_TemperatureMin");

                    b.Property<DateTime>("TemperatureMinTimestamp")
                        .HasColumnName("OutdoorDashboardData_TemperatureMinTimestamp");

                    b.Property<int>("TemperatureTrend")
                        .HasColumnName("OutdoorDashboardData_TemperatureTrend");

                    b.HasDiscriminator().HasValue("NAModule1");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.RainGaugeDashboardData", b =>
                {
                    b.HasBaseType("Netatmo.Dashboard.Api.Models.DashboardData");

                    b.Property<decimal>("Rain");

                    b.Property<decimal>("Sum1H");

                    b.Property<decimal>("Sum24H");

                    b.HasDiscriminator().HasValue("NAModule3");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.WindGaugeDashboardData", b =>
                {
                    b.HasBaseType("Netatmo.Dashboard.Api.Models.DashboardData");

                    b.Property<int>("GustAngle");

                    b.Property<decimal>("GustStrength");

                    b.Property<int>("WindAngle");

                    b.Property<decimal>("WindStrength");

                    b.HasDiscriminator().HasValue("NAModule2");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.MainDevice", b =>
                {
                    b.HasBaseType("Netatmo.Dashboard.Api.Models.Device");

                    b.Property<int>("WifiStatus");

                    b.HasDiscriminator().HasValue("main");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.ModuleDevice", b =>
                {
                    b.HasBaseType("Netatmo.Dashboard.Api.Models.Device");

                    b.Property<decimal>("BatteryPercent");

                    b.Property<int>("BatteryVp");

                    b.Property<int>("RfStatus");

                    b.Property<int>("Type");

                    b.HasDiscriminator().HasValue("module");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.DashboardData", b =>
                {
                    b.HasOne("Netatmo.Dashboard.Api.Models.Device", "Device")
                        .WithMany("DashboardData")
                        .HasForeignKey("DeviceId");
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.Device", b =>
                {
                    b.HasOne("Netatmo.Dashboard.Api.Models.Station", "Station")
                        .WithMany("Devices")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Netatmo.Dashboard.Api.Models.Station", b =>
                {
                    b.HasOne("Netatmo.Dashboard.Api.Models.User", "User")
                        .WithMany("Stations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
